/**
 * Generated by @openapi-codegen
 *
 * @version 1.0.0
 */
import * as reactQuery from "@tanstack/react-query";
import {
  useShoppingcartContext,
  ShoppingcartContext,
} from "./shoppingcartContext";
import type * as Fetcher from "./shoppingcartFetcher";
import { shoppingcartFetch } from "./shoppingcartFetcher";
import type * as Schemas from "./shoppingcartSchemas";

export type FindAllProductsError = Fetcher.ErrorWrapper<undefined>;

export type FindAllProductsResponse = Schemas.Product[];

export type FindAllProductsVariables = ShoppingcartContext["fetcherOptions"];

/**
 * Lists all products
 */
export const fetchFindAllProducts = (
  variables: FindAllProductsVariables,
  signal?: AbortSignal,
) =>
  shoppingcartFetch<
    FindAllProductsResponse,
    FindAllProductsError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/product", method: "get", ...variables, signal });

/**
 * Lists all products
 */
export const useFindAllProducts = <TData = FindAllProductsResponse,>(
  variables: FindAllProductsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      FindAllProductsResponse,
      FindAllProductsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useShoppingcartContext(options);
  return reactQuery.useQuery<
    FindAllProductsResponse,
    FindAllProductsError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/api/product",
      operationId: "findAllProducts",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchFindAllProducts({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type GetProductByIdPathParams = {
  /**
   * ID of product
   *
   * @format int64
   */
  productId: number;
};

export type GetProductByIdError = Fetcher.ErrorWrapper<undefined>;

export type GetProductByIdVariables = {
  pathParams: GetProductByIdPathParams;
} & ShoppingcartContext["fetcherOptions"];

/**
 * Returns a single product
 */
export const fetchGetProductById = (
  variables: GetProductByIdVariables,
  signal?: AbortSignal,
) =>
  shoppingcartFetch<
    Schemas.Product,
    GetProductByIdError,
    undefined,
    {},
    {},
    GetProductByIdPathParams
  >({ url: "/api/product/{productId}", method: "get", ...variables, signal });

/**
 * Returns a single product
 */
export const useGetProductById = <TData = Schemas.Product,>(
  variables: GetProductByIdVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Product, GetProductByIdError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useShoppingcartContext(options);
  return reactQuery.useQuery<Schemas.Product, GetProductByIdError, TData>({
    queryKey: queryKeyFn({
      path: "/api/product/{productId}",
      operationId: "getProductById",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchGetProductById({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type QueryOperation =
  | {
      path: "/api/product";
      operationId: "findAllProducts";
      variables: FindAllProductsVariables;
    }
  | {
      path: "/api/product/{productId}";
      operationId: "getProductById";
      variables: GetProductByIdVariables;
    };
